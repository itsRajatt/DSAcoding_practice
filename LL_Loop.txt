#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    Node *next;
    
    Node(int x)
    {
        data=x;
       next=nullptr
    }
};

//using 3rd part

bool loop3(Node *head) //double traversal and check address 2. modify LL to put visited in the ADT 3. Dummy node used,4. Hashing,5.Floyd Cycle Detection
{
    Node *tmp = new Node;
    Node *curr = head;
    while(curr)
    {
        if(!curr->next) return false;
        if(curr->next == tmp) return true;
        Node *curr_next = curr->next;
        curr->next=tmp;
        curr=curr->next;
    }
    return false;
}

bool loop4(Node *head)
{
    unordered_set<Node *>s;
    for(Node *curr=head;curr;curr=curr->next)
    {
        if(s.find(curr) != s.end())
        {
            return 1;
        }
        s.insert(curr);
    }
    return 0;
}

bool loop5(Node *head) //when dist bw f and s become = length if list loop -> f and s at same node 
//O(m+n) m is when s reach loop start
{
    if(!head) return 0;
    Node *s =head , *f=head;
    
    while(f && f->next)
    {
        s=s->next;
        f=f->next->next;
        if(f==s) return 1;
        
    }
    return 0;
}

int main()
{
    
    
    
    return 0;
}