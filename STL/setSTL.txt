#include <iostream>
#include <set>  // built on top of red black tree
using namespace std;
 
//maintain sorted stream of data,
//double ended priority queue

/*
begin , end rbegin, rend,cbegin crbegin,cend crend,size,empty    O(1)
insert , find , count , lbound , ubound ,erase(val)   O(logn)
erase(it)   amortized O(1)
*/

int main() {
	set<int> s;
	s.insert(10);
	s.insert(5);
	s.insert(20);
	for (int x : s) {
	    cout<<x<<" ";
	}cout<<endl;
	
	set<int,greater<int>> s1;//Decreasing order
	s1.insert(10);
	s1.insert(5);
	s1.insert(20);
	for (auto it=s1.begin();it!=s1.end();it++) {
	    cout<<(*it)<<" ";
	}cout<<endl;
	
	return 0;
	
// 		set<int,greater<int>> s;//Decreasing order
// 	s.insert(10);
// 	s.insert(5);
// 	s.insert(20);
// 	for (auto it=s.rbegin();it!=s.rend();it++) {
// 	    cout<<(*it)<<" ";
// 	}cout<<endl;
	
// 	auto it=s.find(10);
// 	if(it==s.end())
// 	    cout<<"Not found"<<endl;
// 	else
// 	    cout<<"Found"<<endl;
	    
// 	s.clear(); removes all elements
// 	cout<<"Size: "<<s.size()<<endl;
	
// 	return 0;



// set<int> s;
// 	s.insert(10);
// 	s.insert(5);
// 	s.insert(20);
// 	s.insert(7);
	
// 	if(s.count(10)) returns 1 or 0 , can be used in place of find function but find returns iterator hence count tells direct bool
// 	    cout<<"Found"<<endl;
// 	else
// 	    cout<<"Not Found"<<endl;
	    
// 	s.erase(5); removes element or group of elements from set
// 	for(int x: s){
// 	    cout<<x<<" ";
// 	}cout<<endl;
	
// 	auto it=s.find(7);
// 	s.erase(it);    // s.erase(it,s.end()) erases all elements after it
// 	for(int x: s){
// 	    cout<<x<<" ";
// 	}cout<<endl;
	
// 	return 0;



//lbound and upbound are member functions

// set<int> s;
// 	s.insert(10);
// 	s.insert(5);
// 	s.insert(20);

// 	auto it=s.lower_bound(5);  return it for the ele but if not found then returns next big ele's it . if ele is greater than greatest then returns s.end()
// 	if(it!=s.end())
// 	    cout<<(*it)<<endl;
// 	else
// 	    cout<<"Given element is greater than the largest"<<endl;
	   
// 	it=s.upper_bound(5);
// 	if(it!=s.end())
// 	    cout<<(*it)<<endl;
// 	else
// 	    cout<<"Given element is greater than the largest"<<endl;
	    
// 	return 0;

}